{"version":3,"sources":["Chat.js","App.js","serviceWorker.js","index.js"],"names":["Chat","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","messages","connectionManager","handleChange","bind","assertThisInitialized","sendMessage","send","e","preventDefault","type","message","setState","data","clearInterval","timeoutId","setTimeout","event","target","user","push","concat","msgs","map","msg","i","react_default","a","createElement","key","className","onSubmit","placeholder","onChange","id","Component","App","src_Chat_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PA0GeA,qBApGX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,MAAO,GAAIC,SAAU,IACpCT,EAAKU,kBAAoB,KAEzBV,EAAKW,aAAeX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACpBA,EAAKc,YAAcd,EAAKc,YAAYF,KAAjBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACnBA,EAAKe,KAAOf,EAAKe,KAAKH,KAAVX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAPGA,wHAiBPgB,GACRA,EAAEC,iBACFd,KAAKY,KAAK,CACNG,KAAM,OACNC,QAAShB,KAAKI,MAAMC,QAExBL,KAAKiB,SAAS,CAAEZ,MAAO,kCAGtBa,GAEDC,cAAcnB,KAAKoB,WAEnBpB,KAAKO,kBAAkBK,KAAKM,GAE5BlB,KAAKoB,UAAYC,WAAWrB,KAAKY,KAAM,IAAO,CAAEG,KAAM,8CAG7CO,GACTtB,KAAKiB,SAAS,CAAEZ,MAAOiB,EAAMC,OAAOlB,8CAG1BmB,EAAMR,GAChB,IAAMV,EAAWN,KAAKI,MAAME,SAC5BA,EAASmB,KAAT,GAAAC,OAAiBF,EAAjB,MAAAE,OAA0BV,IAC1BhB,KAAKiB,SAAS,CAAEX,8CAKhB,IAAMqB,EAAO3B,KAAKI,MAAME,SAASsB,IAAI,SAACC,EAAKC,GAAN,OAAYC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,EAAGK,UAAU,mBAAmBN,KAE1F,OACIE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBACXJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACTR,IAGTI,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBAAf,iBAEJJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YAEXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAA,QAAMG,SAAUpC,KAAKW,aACjBoB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACXJ,EAAAC,EAAAC,cAAA,SAAOlB,KAAK,OAAOsB,YAAY,aAAaC,SAAUtC,KAAKQ,aAAc2B,UAAU,eAAe9B,MAAOL,KAAKI,MAAMC,QACpH0B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACXJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,MAAMpB,KAAK,SAASwB,GAAG,iBAAzC,qBApEjBC,cCUJC,mLARX,OACEV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACS,EAAD,cAJUF,aCMEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c634c78f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ConnectionManager from './ConnectionManager.js';\r\nimport './Chat.css';\r\n\r\nclass Chat extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: '', messages: [] };\r\n        this.connectionManager = null;\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n        this.send = this.send.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.connectionManager = new ConnectionManager(this);\r\n        // // this.connectionManager.connect('ws://localhost:9876');\r\n        // this.connectionManager.connect('wss://fred-im.herokuapp.com');\r\n        // this.timeoutId = setTimeout(this.send, 30000, { type: 'ping' });\r\n    }\r\n\r\n    sendMessage(e) {\r\n        e.preventDefault();\r\n        this.send({\r\n            type: 'chat',\r\n            message: this.state.value,\r\n        });\r\n        this.setState({ value: '' });\r\n    }\r\n    \r\n    send(data) {\r\n        \r\n        clearInterval(this.timeoutId);\r\n        \r\n        this.connectionManager.send(data);\r\n        \r\n        this.timeoutId = setTimeout(this.send, 30000, { type: 'ping' });\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    appendMessage(user, message) {\r\n        const messages = this.state.messages;\r\n        messages.push(`${user}: ${message}`);\r\n        this.setState({ messages });\r\n    }\r\n\r\n    render() {\r\n\r\n        const msgs = this.state.messages.map((msg, i) => <li key={i} className=\"list-group-item\">{msg}</li>);\r\n\r\n        return (\r\n            <div className=\"container-fluid f-90\">\r\n                <div className=\"row f-90\">\r\n                    <div className=\"col-9 f-90 messages\">\r\n                        <ul className=\"list-group\">\r\n                            {msgs}\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"col-3 f-90 users\">Active Users</div>\r\n                </div>\r\n                <div className=\"col f-10\">\r\n\r\n                    <div className=\"row\">\r\n                        <form onSubmit={this.sendMessage}>\r\n                            <div className=\"input-group\">\r\n                                <input type=\"text\" placeholder=\"Message...\" onChange={this.handleChange} className=\"form-control\" value={this.state.value}/>\r\n                                <div className=\"input-group-append\">\r\n                                    <button className=\"btn\" type=\"button\" id=\"button-addon2\">Send</button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n// class Events {\r\n//     constructor() {\r\n//         this._listeners = new Set;\r\n//     }\r\n\r\n//     listen(name, callback) {\r\n//         this._listeners.add({\r\n//             name,\r\n//             callback\r\n//         });\r\n//     }\r\n\r\n//     emit(name, ...data) {\r\n//         this._listeners.forEach(listener => {\r\n//             if (listener.name === name) {\r\n//                 listener.callback(...data);\r\n//             }\r\n//         });\r\n//     }\r\n// }\r\n\r\nexport default Chat;","import React, { Component } from 'react';\nimport './App.css';\nimport Chat from './Chat.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Chat />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}